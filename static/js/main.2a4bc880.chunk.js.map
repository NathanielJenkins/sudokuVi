{"version":3,"sources":["Components/Board.jsx","Components/NavigationBar.jsx","App.js","index.js"],"names":["Styled","styled","div","Board","state","currentlyRunning","steps","sudokuBoard","styleBoard","immutableNumbers","solveSudoku","backtrack","setState","clearStyleBoard","delay","ms","Promise","res","setTimeout","viz","a","length","sudokuBoardCopy","i","slice","clear","step","row","col","value","valid","cells","rowCol","shuffleArray","array","j","Math","floor","random","board","end","incrementRowCol","choiceArray","choice","shift","toString","validBoard","isValidSudoku","push","outcome","reason","square","colStart","rowStart","r","c","this","generate","rows","entries","indexRow","ent","indexCol","classNames","className","key","Container","Row","Col","ButtonGroup","Button","onClick","variant","Component","NavigationBar","Navbar","bg","Brand","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a4bc880.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { ButtonGroup, Button, Container, Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst Styled = styled.div`\n\t.game-board {\n\t\tborder: 1px solid black;\n\t\twidth: 500px;\n\t\theight: 500px;\n\t}\n\t.controls {\n\t\twidth: 500px;\n\t}\n\n\t@media (max-width: 768px) {\n\t\t.game-board {\n\t\t\twidth: 350px;\n\t\t\theight: 350px;\n\t\t}\n\t\t.controls {\n\t\t\twidth: 350px;\n\t\t}\n\t}\n\n\t@media (max-width: 576px) {\n\t\t.game-board {\n\t\t\twidth: 250px;\n\t\t\theight: 250px;\n\t\t}\n\t\t.controls {\n\t\t\twidth: 250px;\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\n\ttd:first-child {\n\t\tborder-left: solid;\n\t}\n\ttd:nth-child(3n) {\n\t\tborder-right: solid;\n\t}\n\ttr:first-child {\n\t\tborder-top: solid;\n\t}\n\ttr:nth-child(3n) td {\n\t\tborder-bottom: solid;\n\t}\n\ttd {\n\t\theight: 30px;\n\t\twidth: 30px;\n\t\tborder: 1px solid;\n\t\ttext-align: center;\n\t}\n\ttd.bold {\n\t\tfont-weight: bold;\n\t}\n\t.w {\n\t\tbackground-color: white;\n\t}\n\t.r {\n\t\tbackground-color: #ffe6e6;\n\t}\n\t.g {\n\t\tbackground-color: #deffe6;\n\t}\n\t.gr {\n\t\tbackground-color: #fffcde;\n\t}\n`;\n\nclass Board extends Component {\n\tstate = {\n\t\tcurrentlyRunning: false,\n\t\tsteps: [],\n\t\tsudokuBoard: [],\n\t\tstyleBoard: [],\n\t\timmutableNumbers: [],\n\t};\n\n\tcomponentDidMount() {\n\t\t//generate the board\n\t\tthis.generate();\n\t}\n\n\tgenerate() {\n\t\tconst sudokuBoard = [];\n\t\tconst immutableNumbers = [];\n\t\tconst styleBoard = [];\n\n\t\t//init the sudokuBoard, immutableNumbers and the styleBoar\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tsudokuBoard.push([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n\n\t\t\timmutableNumbers.push([\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t]);\n\n\t\t\tstyleBoard.push([\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"]);\n\t\t}\n\t\tthis.setState({ styleBoard });\n\n\t\t//set immutableNumbers before the solve since it requires it\n\t\tthis.setState({ immutableNumbers }, () => {\n\t\t\tthis.backtrack(0, 0, sudokuBoard, true);\n\n\t\t\t//now that we solved the board, lets delete part of it. Hold 12 numbers\n\t\t\tfor (let i = 0; i < 30; i++) {\n\t\t\t\tconst row = Math.floor(Math.random() * 9);\n\t\t\t\tconst col = Math.floor(Math.random() * 9);\n\t\t\t\timmutableNumbers[row][col] = true;\n\t\t\t}\n\n\t\t\tthis.clear(sudokuBoard, immutableNumbers);\n\t\t\tthis.setState({ steps: [] });\n\t\t});\n\t}\n\n\tsolveSudoku = (sudokuBoard) => {\n\t\t//solves the sudokuBoard\n\t\tthis.backtrack(0, 0, sudokuBoard, false);\n\t\tthis.setState({ styleBoard: this.clearStyleBoard(), sudokuBoard });\n\t};\n\n\tdelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n\tviz = () => {\n\t\tif (this.state.currentlyRunning) return;\n\n\t\tthis.setState({ currentlyRunning: true }, async () => {\n\t\t\tconst sudokuBoard = this.state.sudokuBoard;\n\t\t\tconst styleBoard = this.state.styleBoard;\n\t\t\t//the board has not already been solved by the user\n\t\t\tif (this.state.steps.length === 0) {\n\t\t\t\tconst sudokuBoardCopy = [];\n\n\t\t\t\tfor (var i = 0; i < sudokuBoard.length; i++)\n\t\t\t\t\tsudokuBoardCopy[i] = sudokuBoard[i].slice();\n\n\t\t\t\t//generate the steps with the sudokuBoardCopy so we don't alter the board\n\t\t\t\tthis.backtrack(0, 0, sudokuBoardCopy, false);\n\n\t\t\t\t// the board has already been solved by the user so we need to clear it\n\t\t\t} else {\n\t\t\t\tthis.clear(this.state.sudokuBoard, this.state.immutableNumbers);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.state.steps.length; i++) {\n\t\t\t\tif (!this.state.currentlyRunning) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst step = this.state.steps[i];\n\n\t\t\t\tsudokuBoard[step.row][step.col] = step.value;\n\n\t\t\t\tif (step.valid) styleBoard[step.row][step.col] = \"g\";\n\t\t\t\t//determine the cells to set red\n\t\t\t\telse {\n\t\t\t\t\tfor (let i = 0; i < step.cells.length; i++) {\n\t\t\t\t\t\tconst rowCol = step.cells[i];\n\n\t\t\t\t\t\tstyleBoard[rowCol[0]][rowCol[1]] = \"r\";\n\t\t\t\t\t\tstyleBoard[step.row][step.col] = \"gr\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.setState({ sudokuBoard });\n\t\t\t\tawait this.delay(100);\n\t\t\t\tstyleBoard[step.row][step.col] = \"w\";\n\t\t\t\tfor (let i = 0; i < step.cells.length; i++) {\n\t\t\t\t\tconst rowCol = step.cells[i];\n\t\t\t\t\tstyleBoard[rowCol[0]][rowCol[1]] = \"w\";\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tclear = (sudokuBoard, immutableNumbers) => {\n\t\t//loop through all the squares and clear others\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tif (!immutableNumbers[row][col]) sudokuBoard[row][col] = \"\";\n\t\t\t}\n\t\t}\n\t\tthis.setState({ styleBoard: this.clearStyleBoard(), sudokuBoard });\n\t};\n\n\t//sets all the squares in the styleboard to white and returns the cleared board\n\tclearStyleBoard = () => {\n\t\t//clear the styleboard\n\t\tconst styleBoard = this.state.styleBoard;\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tstyleBoard[row][col] = \"w\";\n\t\t\t}\n\t\t}\n\t\treturn styleBoard;\n\t};\n\n\t//takes an array an returns a shuffled version of that array\n\tshuffleArray = (array) => {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t};\n\n\t//function that solves the board using a recursive backtracking strategy\n\tbacktrack = (row, col, board, random) => {\n\t\tlet end = false;\n\n\t\tif (row === 9) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// if the current column and row are immutable\n\t\tif (this.state.immutableNumbers[row][col]) {\n\t\t\tconst rowCol = this.incrementRowCol(row, col);\n\t\t\tend = this.backtrack(rowCol[0], rowCol[1], board, random);\n\n\t\t\t// if the current column and row are changeable\n\t\t} else {\n\t\t\tlet choiceArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\t\tif (random) {\n\t\t\t\tchoiceArray = this.shuffleArray(choiceArray);\n\t\t\t}\n\n\t\t\tfor (let choice = 1; choice <= 9; choice++) {\n\t\t\t\t// if the current column and row can be changed\n\t\t\t\tconst value = choiceArray.shift().toString();\n\t\t\t\t//const value = choice.toString();\n\t\t\t\tboard[row][col] = value;\n\n\t\t\t\tconst validBoard = this.isValidSudoku(board, row, col, value);\n\n\t\t\t\tthis.state.steps.push({\n\t\t\t\t\tcol: col,\n\t\t\t\t\trow: row,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvalid: validBoard.outcome,\n\t\t\t\t\treason: validBoard.reason,\n\t\t\t\t\tcells: validBoard.cells,\n\t\t\t\t});\n\n\t\t\t\tif (validBoard.outcome) {\n\t\t\t\t\tconst rowCol = this.incrementRowCol(row, col);\n\t\t\t\t\tend = this.backtrack(rowCol[0], rowCol[1], board, random);\n\t\t\t\t\tif (end) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboard[row][col] = \"\";\n\t\t\tthis.state.steps.push({\n\t\t\t\tcol: col,\n\t\t\t\trow: row,\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalid: null,\n\t\t\t\treason: null,\n\t\t\t\tcells: [],\n\t\t\t});\n\t\t}\n\t\treturn end;\n\t};\n\n\t//increments the row and column\n\tincrementRowCol = (row, col) => {\n\t\tcol++;\n\n\t\tif (col === 9) {\n\t\t\tcol = 0;\n\t\t\trow++;\n\t\t}\n\n\t\treturn [row, col];\n\t};\n\n\t//checks if the current board is valid\n\tisValidSudoku = (board, row, col, value) => {\n\t\tlet cells;\n\t\tlet outcome;\n\t\t//row check\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells.push([row, i]);\n\t\t\tif (board[row][i] === value && i !== col) {\n\t\t\t\toutcome = false;\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome, reason: 0, cells };\n\n\t\t//col check\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells.push([i, col]);\n\t\t\tif (board[i][col] === value && i !== row) {\n\t\t\t\toutcome = false;\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome, reason: 1, cells };\n\n\t\t//square check\n\t\tconst square = Math.floor(row / 3) + Math.floor(col / 3) * 3;\n\t\tconst colStart = Math.floor(square / 3) * 3;\n\t\tconst rowStart = (square % 3) * 3;\n\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let r = rowStart; r < rowStart + 3; r++) {\n\t\t\tfor (let c = colStart; c < colStart + 3; c++) {\n\t\t\t\tcells.push([r, c]);\n\t\t\t\tif (board[r][c] === value && row !== r && col !== c) {\n\t\t\t\t\toutcome = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome: false, reason: 2, cells };\n\n\t\treturn { outcome: true, reason: null, cells: [] };\n\t};\n\n\trender() {\n\t\t// build the sudoku board from above\n\t\tconst rows = [];\n\t\tfor (const [indexRow, row] of this.state.sudokuBoard.entries()) {\n\t\t\tlet ent = [];\n\t\t\tfor (const [indexCol, value] of row.entries()) {\n\t\t\t\tlet classNames = this.state.styleBoard[indexRow][indexCol];\n\t\t\t\tif (this.state.immutableNumbers[indexRow][indexCol])\n\t\t\t\t\tclassNames += \" font-weight-bold\";\n\n\t\t\t\tent.push(\n\t\t\t\t\t<td className={classNames} key={indexCol + \"-\" + indexRow}>\n\t\t\t\t\t\t{value}\n\t\t\t\t\t</td>\n\t\t\t\t);\n\t\t\t}\n\t\t\trows.push(\n\t\t\t\t<tr key={indexRow} className=\"game-row\">\n\t\t\t\t\t{ent}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<Styled>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"text-center table-container\">\n\t\t\t\t\t\t\t\t<table className=\"mx-auto mt-4 game-board\">\n\t\t\t\t\t\t\t\t\t<tbody>{rows}</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t<ButtonGroup className=\"controls mt-2\">\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\t\t\t\t\t\t\t\t\t\t\tthis.generate();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\n\t\t\t\t\t\t\t\t\t\t\t//end the viz if it is going\n\t\t\t\t\t\t\t\t\t\t\tthis.clear(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.sudokuBoard,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.immutableNumbers\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.viz();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tVisualize\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\n\t\t\t\t\t\t\t\t\t\t\tthis.solveSudoku(this.state.sudokuBoard);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSolve\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Styled>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nimport styled from \"styled-components\";\n\nconst Styled = styled.div``;\n\nclass NavigationBar extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<Styled>\n\t\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t<Navbar.Brand href=\"/\">Sudoku Solver</Navbar.Brand>\n\t\t\t\t</Navbar>\n\t\t\t</Styled>\n\t\t);\n\t}\n}\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\n\nimport Board from \"./Components/Board\";\nimport NavigationBar from \"./Components/NavigationBar\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<NavigationBar />\n\t\t\t<Board />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}