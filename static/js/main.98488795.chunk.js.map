{"version":3,"sources":["Components/Board/Entry.jsx","Components/Board/Board.jsx","Components/PhonePad/Entry.jsx","Components/PhonePad/PhonePad.jsx","Components/Controls/Entry.jsx","Components/Controls/Controls.jsx","Components/NavigationBar.jsx","App.js","index.js"],"names":["TableEntru","styled","td","Entry","props","onEntryClick","className","indexCol","indexRow","value","onClick","key","Styled","div","Board","tableClassName","sudokuBoard","styleBoard","immutableNumbers","rows","entries","row","ent","classNames","push","color","buildBoard","handleOnNumberSelect","variant","render","PhonePad","i","j","toString","Table","borderless","label","icon","style","textAlign","Controls","onViz","onSolve","onClear","onMutableClick","isMutable","size","NavigationBar","onAllClear","onHandleGenerate","Navbar","bg","Brand","href","Collapse","id","Nav","NavDropdown","title","Item","App","state","currentlyRunning","steps","currentSelectedEntry","initDataBoards","Array","fill","handleGenerate","setState","backtrack","Math","floor","random","col","clear","solveSudoku","returnCopyOf2DArray","clearStyleBoard","delay","ms","Promise","res","setTimeout","handleViz","a","length","sudokuBoardCopy","slice","step","colourBoard","clearBoard","handleSolve","handleAllClear","shuffleArray","array","board","end","rowCol","incrementRowCol","choiceArray","choice","shift","validBoard","isValidSudoku","outcome","reason","cells","square","colStart","rowStart","r","c","arrayCopy","sudokuBoardState","immutableNumbersState","handleEntryClick","handleClear","handleOnMutableClick","this","border","type","onChange","handleOnInput","name","Container","Row","Col","xl","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98488795.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TableEntru = styled.td`\n\t.w {\n\t\tbackground-color: white;\n\t}\n\t.r {\n\t\tbackground-color: #ffe6e6;\n\t}\n\t.g {\n\t\tbackground-color: #deffe6;\n\t}\n\t.gr {\n\t\tbackground-color: #fffcde;\n\t}\n`;\nconst Entry = (props) => {\n\tconst { onEntryClick, className, indexCol, indexRow, value } = props;\n\treturn (\n\t\t<TableEntru\n\t\t\tonClick={() => onEntryClick(indexRow, indexCol)}\n\t\t\tclassName={className}\n\t\t\tkey={indexCol + \"-\" + indexRow}\n\t\t>\n\t\t\t{value}\n\t\t</TableEntru>\n\t);\n};\n\nexport default Entry;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Entry from \"./Entry\";\n\nconst Styled = styled.div`\n\t.sized {\n\t\twidth: 500px;\n\t\theight: 500px;\n\t}\n\n\t@media (max-width: 576px) {\n\t\t.sized {\n\t\t\twidth: 250px;\n\t\t\theight: 250px;\n\t\t}\n\t}\n\ttd:first-child {\n\t\tborder-left: solid;\n\t}\n\ttd:nth-child(3n) {\n\t\tborder-right: solid;\n\t}\n\ttr:first-child {\n\t\tborder-top: solid;\n\t}\n\ttr:nth-child(3n) td {\n\t\tborder-bottom: solid;\n\t}\n\ttd {\n\t\theight: 30px;\n\t\twidth: 30px;\n\t\tborder: 1px lightgrey solid;\n\t\ttext-align: center;\n\t}\n\ttd.bold {\n\t\tfont-weight: bold;\n\t}\n\t.w {\n\t\tbackground-color: white;\n\t}\n\t.r {\n\t\tbackground-color: #ffe6e6;\n\t}\n\t.g {\n\t\tbackground-color: #deffe6;\n\t}\n\t.gr {\n\t\tbackground-color: #fffcde;\n\t}\n`;\nconst Board = (props) => {\n\tconst buildBoard = () => {\n\t\tconst { sudokuBoard, styleBoard, immutableNumbers, onEntryClick } = props;\n\t\t// build the sudoku board from above\n\t\tconst rows = [];\n\t\tfor (const [indexRow, row] of sudokuBoard.entries()) {\n\t\t\tlet ent = [];\n\t\t\tfor (const [indexCol, value] of row.entries()) {\n\t\t\t\tlet classNames = styleBoard[indexRow][indexCol];\n\n\t\t\t\tif (immutableNumbers[indexRow][indexCol])\n\t\t\t\t\tclassNames += \" font-weight-bold\";\n\n\t\t\t\tent.push(\n\t\t\t\t\t<Entry\n\t\t\t\t\t\tonEntryClick={onEntryClick}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tclassName={classNames}\n\t\t\t\t\t\tkey={indexCol + \"-\" + indexRow}\n\t\t\t\t\t\tindexCol={indexCol}\n\t\t\t\t\t\tindexRow={indexRow}\n\t\t\t\t\t\tcolor={styleBoard[indexRow][indexCol]}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\trows.push(\n\t\t\t\t<tr key={indexRow} className=\"game-row\">\n\t\t\t\t\t{ent}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\t\treturn rows;\n\t};\n\n\tconst { className: tableClassName } = props;\n\treturn (\n\t\t<Styled>\n\t\t\t<table className={`${tableClassName} sized text-center`}>\n\t\t\t\t<tbody>{buildBoard()}</tbody>\n\t\t\t</table>\n\t\t</Styled>\n\t);\n};\n\nexport default Board;\n","import React from \"react\";\nconst Entry = (props) => {\n\tconst { value, handleOnNumberSelect, variant } = props;\n\n\treturn (\n\t\t<td\n\t\t\tonClick={() => handleOnNumberSelect(value)}\n\t\t\tclassName={`btn btn-${variant} text-center`}\n\t\t>\n\t\t\t{props.render ? props.render : value}\n\t\t</td>\n\t);\n};\n\nexport default Entry;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Table } from \"react-bootstrap\";\nimport { FaEraser } from \"react-icons/fa\";\nimport Entry from \"./Entry\";\n\nconst Styled = styled.div`\n\ttd {\n\t\twidth: 33.33%;\n\t}\n`;\n\nconst PhonePad = (props) => {\n\tconst { handleOnNumberSelect, className } = props;\n\tlet rows = [];\n\tfor (let i = 0; i < 3; i++) {\n\t\tlet row = [];\n\t\tfor (let j = 0; j < 3; j++) {\n\t\t\trow.push(\n\t\t\t\t<Entry\n\t\t\t\t\tkey={`${j}-entry`}\n\t\t\t\t\thandleOnNumberSelect={handleOnNumberSelect}\n\t\t\t\t\tvalue={(i * 3 + j + 1).toString()}\n\t\t\t\t\tvariant=\"light\"\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\trows.push(<tr key={`${i}-entry`}>{row}</tr>);\n\t}\n\trows.push(\n\t\t<tr className=\"text-center\" key={\"empty\"}>\n\t\t\t<Entry\n\t\t\t\thandleOnNumberSelect={handleOnNumberSelect}\n\t\t\t\tvalue={\"\"}\n\t\t\t\trender={<FaEraser />}\n\t\t\t\tvariant=\"light\"\n\t\t\t/>\n\t\t</tr>\n\t);\n\treturn (\n\t\t<Styled>\n\t\t\t<Table borderless className={className}>\n\t\t\t\t<tbody>{rows}</tbody>\n\t\t\t</Table>\n\t\t</Styled>\n\t);\n};\n\nexport default PhonePad;\n","import React from \"react\";\n\nconst Entry = (props) => {\n\tconst { label, onClick, icon, variant } = props;\n\treturn (\n\t\t<td\n\t\t\tclassName={`btn btn-${variant}`}\n\t\t\tonClick={onClick}\n\t\t\tstyle={{ textAlign: \"center\" }}\n\t\t>\n\t\t\t{icon}\n\t\t\t<div className=\"my-2\" />\n\t\t\t{label}\n\t\t</td>\n\t);\n};\n\nexport default Entry;\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport Entry from \"./Entry\";\n\nimport {\n\tFaRegEye,\n\tFaRegCheckCircle,\n\tFaRegTimesCircle,\n\tFaRegEdit,\n} from \"react-icons/fa\";\nimport styled from \"styled-components\";\nconst Styled = styled.div`\n\ttd {\n\t\twidth: 25%;\n\t}\n`;\nconst Controls = (props) => {\n\tconst {\n\t\tonViz,\n\t\tonSolve,\n\t\tonClear,\n\t\tonMutableClick,\n\t\tclassName,\n\t\tisMutable,\n\t} = props;\n\n\treturn (\n\t\t<Styled>\n\t\t\t<Table borderless className={className}>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Entry\n\t\t\t\t\t\t\ticon={<FaRegEye size={50} />}\n\t\t\t\t\t\t\tonClick={onViz}\n\t\t\t\t\t\t\tlabel=\"Visualize\"\n\t\t\t\t\t\t\tvariant=\"light\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Entry\n\t\t\t\t\t\t\ticon={<FaRegTimesCircle size={50} />}\n\t\t\t\t\t\t\tonClick={onClear}\n\t\t\t\t\t\t\tlabel=\"Clear\"\n\t\t\t\t\t\t\tvariant=\"light\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Entry\n\t\t\t\t\t\t\ticon={<FaRegCheckCircle size={50} />}\n\t\t\t\t\t\t\tonClick={onSolve}\n\t\t\t\t\t\t\tlabel=\"Solve\"\n\t\t\t\t\t\t\tvariant=\"light\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Entry\n\t\t\t\t\t\t\ticon={<FaRegEdit size={50} />}\n\t\t\t\t\t\t\tonClick={onMutableClick}\n\t\t\t\t\t\t\tlabel=\"Edit\"\n\t\t\t\t\t\t\tvariant={isMutable ? \"light\" : \"dark\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</Styled>\n\t);\n};\n\nexport default Controls;\n","import React from \"react\";\nimport { Navbar, NavDropdown, Nav } from \"react-bootstrap\";\n\nconst NavigationBar = (props) => {\n\tconst { onAllClear, onHandleGenerate } = props;\n\treturn (\n\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t<Navbar.Brand href=\"/\">Sudoku Solver</Navbar.Brand>\n\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t<Nav className=\"\">\n\t\t\t\t\t<NavDropdown title=\"New Game\" id=\"basic-nav-dropdown\">\n\t\t\t\t\t\t<NavDropdown.Item onClick={onAllClear}>New Blank</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item onClick={onHandleGenerate}>\n\t\t\t\t\t\t\tNew Solvable Game\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t);\n};\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport Board from \"./Components/Board/Board\";\nimport PhonePad from \"./Components/PhonePad/PhonePad\";\nimport Controls from \"./Components/Controls/Controls\";\nimport NavigationBar from \"./Components/NavigationBar\";\n\nconst Styled = styled.div``;\nclass App extends Component {\n\tstate = {\n\t\tcurrentlyRunning: false,\n\t\tsteps: [],\n\t\tsudokuBoard: [],\n\t\tstyleBoard: [],\n\t\timmutableNumbers: [],\n\t\tcurrentSelectedEntry: null,\n\t\tisMutable: true,\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.handleGenerate();\n\t}\n\n\tinitDataBoards = () => {\n\t\tlet sudokuBoard = [];\n\t\tlet immutableNumbers = [];\n\t\tlet styleBoard = [];\n\n\t\t//init the sudokuBoard, immutableNumbers and the styleBoar\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tsudokuBoard.push(new Array(9).fill(\"\"));\n\t\t\timmutableNumbers.push(new Array(9).fill(false));\n\t\t\tstyleBoard.push(new Array(9).fill(\"w\"));\n\t\t}\n\t\treturn { sudokuBoard, immutableNumbers, styleBoard };\n\t};\n\n\thandleGenerate = () => {\n\t\tconst { sudokuBoard, immutableNumbers, styleBoard } = this.initDataBoards();\n\t\tthis.setState({ styleBoard, sudokuBoard, immutableNumbers });\n\n\t\t//set immutableNumbers before the solve since it requires it\n\t\tthis.setState({ immutableNumbers }, () => {\n\t\t\tthis.backtrack(0, 0, sudokuBoard, true);\n\n\t\t\t//now that we solved the board, lets delete part of it. Hold 12 numbers\n\t\t\tfor (let i = 0; i < 30; i++) {\n\t\t\t\tconst row = Math.floor(Math.random() * 9);\n\t\t\t\tconst col = Math.floor(Math.random() * 9);\n\t\t\t\timmutableNumbers[row][col] = true;\n\t\t\t}\n\n\t\t\tthis.clear(sudokuBoard, immutableNumbers);\n\t\t\tthis.setState({ steps: [] });\n\t\t});\n\t};\n\n\tsolveSudoku = () => {\n\t\t//solves the sudokuBoard\n\t\tlet sudokuBoard = this.returnCopyOf2DArray(this.state.sudokuBoard);\n\t\tthis.backtrack(0, 0, sudokuBoard, false);\n\t\tthis.setState({\n\t\t\tstyleBoard: this.clearStyleBoard(),\n\t\t\tsudokuBoard,\n\t\t});\n\t};\n\n\tdelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n\thandleViz = () => {\n\t\tif (this.state.currentlyRunning) return;\n\n\t\tthis.setState({ currentlyRunning: true }, async () => {\n\t\t\tlet sudokuBoard = this.returnCopyOf2DArray(this.state.sudokuBoard);\n\t\t\tlet styleBoard = this.returnCopyOf2DArray(this.state.styleBoard);\n\t\t\tconst { immutableNumbers, steps } = this.state;\n\t\t\t//the board has not already been solved by the user\n\t\t\tif (steps.length === 0) {\n\t\t\t\t//create a copy of the board, not a reference\n\t\t\t\tconst sudokuBoardCopy = [];\n\n\t\t\t\tfor (var i = 0; i < sudokuBoard.length; i++)\n\t\t\t\t\tsudokuBoardCopy[i] = sudokuBoard[i].slice();\n\n\t\t\t\t//generate the steps with the sudokuBoardCopy so we don't alter the board\n\t\t\t\tthis.backtrack(0, 0, this.returnCopyOf2DArray(sudokuBoard), false);\n\t\t\t}\n\t\t\t// the board has already been solved by the user so we need to clear it\n\t\t\telse this.clear(sudokuBoard, immutableNumbers);\n\n\t\t\tfor (let i = 0; i < steps.length; i++) {\n\t\t\t\tif (!this.state.currentlyRunning) return;\n\n\t\t\t\tconst step = this.state.steps[i];\n\n\t\t\t\tsudokuBoard[step.row][step.col] = step.value;\n\n\t\t\t\tthis.colourBoard(step, styleBoard);\n\t\t\t\tthis.setState({ sudokuBoard, styleBoard });\n\t\t\t\tawait this.delay(100);\n\t\t\t\tthis.clearBoard(step, styleBoard);\n\t\t\t}\n\t\t});\n\t};\n\n\thandleSolve = () => {\n\t\tthis.setState({ currentlyRunning: false });\n\t\tthis.solveSudoku();\n\t};\n\n\t//keeps the immutable numbers clears the rest\n\tclear = (sudokuBoard, immutableNumbers) => {\n\t\t//loop through all the squares and clear others\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tif (!immutableNumbers[row][col]) sudokuBoard[row][col] = \"\";\n\t\t\t}\n\t\t}\n\t\tthis.setState({ styleBoard: this.clearStyleBoard(), sudokuBoard });\n\t};\n\n\t//clears all numbers\n\thandleAllClear = () => {\n\t\tthis.setState(this.initDataBoards());\n\t\tthis.setState({ steps: [] });\n\t};\n\n\t//sets all the squares in the styleboard to white and returns the cleared board\n\tclearStyleBoard = () => {\n\t\t//clear the styleboard\n\t\tconst styleBoard = this.state.styleBoard;\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tstyleBoard[row][col] = \"w\";\n\t\t\t}\n\t\t}\n\t\treturn styleBoard;\n\t};\n\n\t//takes an array an returns a shuffled version of that array\n\tshuffleArray = (array) => {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t};\n\n\t//function that solves the board using a recursive backtracking strategy\n\tbacktrack = (row, col, board, random) => {\n\t\tconst { immutableNumbers, steps } = this.state;\n\t\tlet end = false;\n\n\t\tif (row === 9) return true;\n\n\t\t// if the current column and row are immutable\n\t\tif (immutableNumbers[row][col]) {\n\t\t\tconst rowCol = this.incrementRowCol(row, col);\n\t\t\tend = this.backtrack(rowCol[0], rowCol[1], board, random);\n\n\t\t\t// if the current column and row are changeable\n\t\t} else {\n\t\t\tlet choiceArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\t\tif (random) choiceArray = this.shuffleArray(choiceArray);\n\n\t\t\tfor (let choice = 1; choice <= 9; choice++) {\n\t\t\t\t// if the current column and row can be changed\n\t\t\t\tconst value = choiceArray.shift().toString();\n\t\t\t\tboard[row][col] = value;\n\n\t\t\t\tconst validBoard = this.isValidSudoku(board, row, col, value);\n\n\t\t\t\tsteps.push({\n\t\t\t\t\tcol: col,\n\t\t\t\t\trow: row,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\t...validBoard,\n\t\t\t\t});\n\n\t\t\t\tif (validBoard.outcome) {\n\t\t\t\t\tconst rowCol = this.incrementRowCol(row, col);\n\t\t\t\t\tend = this.backtrack(rowCol[0], rowCol[1], board, random);\n\t\t\t\t\tif (end) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboard[row][col] = \"\";\n\t\t\tsteps.push({\n\t\t\t\tcol: col,\n\t\t\t\trow: row,\n\t\t\t\tvalue: \"\",\n\t\t\t\toutcome: null,\n\t\t\t\treason: null,\n\t\t\t\tcells: [],\n\t\t\t});\n\t\t}\n\t\treturn end;\n\t};\n\n\t//increments the row and column\n\tincrementRowCol = (row, col) => {\n\t\tcol++;\n\n\t\tif (col === 9) {\n\t\t\tcol = 0;\n\t\t\trow++;\n\t\t}\n\n\t\treturn [row, col];\n\t};\n\n\t//checks if the current board is valid\n\tisValidSudoku = (board, row, col, value) => {\n\t\tlet cells;\n\t\tlet outcome;\n\t\t//row check\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells.push([row, i]);\n\t\t\tif (board[row][i] === value && i !== col) {\n\t\t\t\toutcome = false;\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome, reason: 0, cells };\n\n\t\t//col check\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells.push([i, col]);\n\t\t\tif (board[i][col] === value && i !== row) {\n\t\t\t\toutcome = false;\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome, reason: 1, cells };\n\n\t\t//square check\n\t\tconst square = Math.floor(row / 3) + Math.floor(col / 3) * 3;\n\t\tconst colStart = Math.floor(square / 3) * 3;\n\t\tconst rowStart = (square % 3) * 3;\n\n\t\tcells = [];\n\t\toutcome = true;\n\t\tfor (let r = rowStart; r < rowStart + 3; r++) {\n\t\t\tfor (let c = colStart; c < colStart + 3; c++) {\n\t\t\t\tcells.push([r, c]);\n\t\t\t\tif (board[r][c] === value && row !== r && col !== c) {\n\t\t\t\t\toutcome = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!outcome) return { outcome: false, reason: 2, cells };\n\n\t\treturn { outcome: true, reason: null, cells: [] };\n\t};\n\n\tbuildBoard() {\n\t\tconst { sudokuBoard, styleBoard, immutableNumbers } = this.state;\n\t\t// build the sudoku board from above\n\t\tconst rows = [];\n\t\tfor (const [indexRow, row] of sudokuBoard.entries()) {\n\t\t\tlet ent = [];\n\t\t\tfor (const [indexCol, value] of row.entries()) {\n\t\t\t\tlet classNames = styleBoard[indexRow][indexCol];\n\n\t\t\t\tif (immutableNumbers[indexRow][indexCol])\n\t\t\t\t\tclassNames += \" font-weight-bold\";\n\n\t\t\t\tent.push(\n\t\t\t\t\t<td className={classNames} key={indexCol + \"-\" + indexRow}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName={classNames}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tstyle={{ border: \"none\" }}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\tonChange={this.handleOnInput}\n\t\t\t\t\t\t\tname={`${indexRow} ${indexCol}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</td>\n\t\t\t\t);\n\t\t\t}\n\t\t\trows.push(\n\t\t\t\t<tr key={indexRow} className=\"game-row\">\n\t\t\t\t\t{ent}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\t\treturn rows;\n\t}\n\n\treturnCopyOf2DArray = (array) => {\n\t\tconst arrayCopy = [];\n\t\tfor (var i = 0; i < array.length; i++) arrayCopy[i] = array[i].slice();\n\t\treturn arrayCopy;\n\t};\n\n\thandleOnNumberSelect = (value) => {\n\t\tconst {\n\t\t\tcurrentSelectedEntry,\n\t\t\tsudokuBoard: sudokuBoardState,\n\t\t\timmutableNumbers: immutableNumbersState,\n\t\t\tisMutable,\n\t\t} = this.state;\n\n\t\tif (!currentSelectedEntry) return;\n\n\t\tconst [row, col] = currentSelectedEntry;\n\t\t//if they are changing immutable without edit button selected\n\t\tif (immutableNumbersState[row][col] && isMutable) return;\n\n\t\tlet sudokuBoard = this.returnCopyOf2DArray(sudokuBoardState);\n\t\tsudokuBoard[row][col] = value;\n\n\t\tif (!isMutable) {\n\t\t\tlet immutableNumbers = this.returnCopyOf2DArray(immutableNumbersState);\n\t\t\timmutableNumbers[row][col] = true;\n\t\t\tthis.setState({ immutableNumbers });\n\t\t}\n\t\tthis.setState({ sudokuBoard });\n\n\t\t//determine the validity of the board the vis\n\t\tconst step = {\n\t\t\tcol,\n\t\t\trow,\n\t\t\tvalue,\n\t\t\t...this.isValidSudoku(sudokuBoard, row, col, value),\n\t\t};\n\n\t\tconst { styleBoard } = this.initDataBoards();\n\t\tthis.colourBoard(step, styleBoard);\n\t\tthis.setState({ styleBoard });\n\t};\n\n\tcolourBoard = (step, styleBoard) => {\n\t\tif (step.outcome) styleBoard[step.row][step.col] = \"g\";\n\t\t//determine the cells to set red\n\t\telse {\n\t\t\tfor (let i = 0; i < step.cells.length; i++) {\n\t\t\t\tconst [row, col] = step.cells[i];\n\n\t\t\t\tstyleBoard[row][col] = \"r\";\n\t\t\t\tstyleBoard[step.row][step.col] = \"gr\";\n\t\t\t}\n\t\t}\n\t};\n\n\tclearBoard = (step, styleBoard) => {\n\t\tstyleBoard[step.row][step.col] = \"w\";\n\t\tfor (let i = 0; i < step.cells.length; i++) {\n\t\t\tconst [row, col] = step.cells[i];\n\t\t\tstyleBoard[row][col] = \"w\";\n\t\t}\n\t};\n\n\thandleEntryClick = (row, col) => {\n\t\tlet { styleBoard } = this.initDataBoards();\n\t\tstyleBoard[row][col] = \"gr\";\n\t\tconst currentSelectedEntry = [row, col];\n\t\tthis.setState({ styleBoard, currentSelectedEntry });\n\t};\n\n\thandleClear = () => {\n\t\tconst { sudokuBoard: sudokuBoardState, immutableNumbers } = this.state;\n\t\tlet sudokuBoard = this.returnCopyOf2DArray(sudokuBoardState);\n\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tif (!immutableNumbers[row][col]) sudokuBoard[row][col] = \"\";\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tstyleBoard: this.clearStyleBoard(),\n\t\t\tsudokuBoard,\n\t\t\tcurrentlyRunning: false,\n\t\t});\n\t};\n\n\thandleOnMutableClick = () => {\n\t\tconst isMutable = !this.state.isMutable;\n\t\tthis.setState({ isMutable });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Styled>\n\t\t\t\t<NavigationBar\n\t\t\t\t\tonHandleGenerate={this.handleGenerate}\n\t\t\t\t\tonAllClear={this.handleAllClear}\n\t\t\t\t/>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row className={\"mt-4\"}>\n\t\t\t\t\t\t<Col xl={6}>\n\t\t\t\t\t\t\t<Board\n\t\t\t\t\t\t\t\tsudokuBoard={this.state.sudokuBoard}\n\t\t\t\t\t\t\t\tstyleBoard={this.state.styleBoard}\n\t\t\t\t\t\t\t\timmutableNumbers={this.state.immutableNumbers}\n\t\t\t\t\t\t\t\tonEntryClick={this.handleEntryClick}\n\t\t\t\t\t\t\t\tclassName={\"mx-auto\"}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xl={6}>\n\t\t\t\t\t\t\t<Controls\n\t\t\t\t\t\t\t\tonViz={this.handleViz}\n\t\t\t\t\t\t\t\tonClear={this.handleClear}\n\t\t\t\t\t\t\t\tonSolve={this.handleSolve}\n\t\t\t\t\t\t\t\tonMutableClick={this.handleOnMutableClick}\n\t\t\t\t\t\t\t\tisMutable={this.state.isMutable}\n\t\t\t\t\t\t\t\tclassName={\"mx-auto mt-2 mb-0\"}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<PhonePad\n\t\t\t\t\t\t\t\tclassName={\"mx-auto\"}\n\t\t\t\t\t\t\t\thandleOnNumberSelect={this.handleOnNumberSelect}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Styled>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}