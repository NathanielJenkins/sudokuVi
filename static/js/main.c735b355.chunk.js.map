{"version":3,"sources":["Components/Board.jsx","Components/NavigationBar.jsx","App.js","index.js"],"names":["Styled","styled","div","Board","state","currentlyRunning","steps","sudokuBoard","immutableNumbers","solveSudoku","backtrack","setState","delay","ms","Promise","res","setTimeout","viz","a","length","sudokuBoardCopy","i","slice","clear","step","row","col","value","shuffleArray","array","j","Math","floor","random","board","end","colRow","incrementColRow","choiceArray","choice","shift","toString","validBoard","isValidSudoku","push","valid","outcome","reason","square","colStart","rowStart","r","c","changeBoard","this","generate","rows","entries","indexRow","ent","indexCol","className","key","Container","Row","Col","ButtonGroup","size","Button","onClick","variant","Component","NavigationBar","Navbar","bg","Brand","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c735b355.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { ButtonGroup, Button, Container, Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst Styled = styled.div`\n\t.game-board {\n\t\tborder: 1px solid black;\n\t\twidth: 500px;\n\t\theight: 500px;\n\t}\n\ttd:first-child {\n\t\tborder-left: solid;\n\t}\n\ttd:nth-child(3n) {\n\t\tborder-right: solid;\n\t}\n\ttr:first-child {\n\t\tborder-top: solid;\n\t}\n\ttr:nth-child(3n) td {\n\t\tborder-bottom: solid;\n\t}\n\ttd {\n\t\theight: 30px;\n\t\twidth: 30px;\n\t\tborder: 1px solid;\n\t\ttext-align: center;\n\t}\n\ttd.bold {\n\t\tfont-weight: bold;\n\t}\n\t.controls {\n\t\twidth: 500px;\n\t}\n`;\n\nclass Board extends Component {\n\tstate = {\n\t\tcurrentlyRunning: false,\n\t\tsteps: [],\n\t\tsudokuBoard: [],\n\t\timmutableNumbers: [],\n\t};\n\n\tcomponentDidMount() {\n\t\t//generate the board\n\t\tthis.generate();\n\t}\n\n\tgenerate() {\n\t\tconst sudokuBoard = [];\n\t\tconst immutableNumbers = [];\n\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tsudokuBoard.push([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n\n\t\t\timmutableNumbers.push([\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t]);\n\t\t}\n\n\t\tthis.setState({ immutableNumbers }, () => {\n\t\t\tthis.backtrack(0, 0, sudokuBoard, true);\n\n\t\t\t//now that we solved the board, lets delete part of it. Hold 12 numbers\n\t\t\tfor (let i = 0; i < 12; i++) {\n\t\t\t\tconst row = Math.floor(Math.random() * 9);\n\t\t\t\tconst col = Math.floor(Math.random() * 9);\n\t\t\t\timmutableNumbers[row][col] = true;\n\t\t\t}\n\n\t\t\tthis.clear(sudokuBoard, immutableNumbers);\n\n\t\t\tthis.setState({ steps: [] });\n\t\t});\n\t}\n\n\tsolveSudoku = (sudokuBoard) => {\n\t\t//end the viz if it is going\n\t\tthis.backtrack(0, 0, sudokuBoard, false);\n\t\tthis.setState({ sudokuBoard });\n\t};\n\n\tdelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n\tviz = () => {\n\t\tif (this.state.currentlyRunning) return;\n\n\t\tthis.setState({ currentlyRunning: true }, async () => {\n\t\t\tconst sudokuBoard = this.state.sudokuBoard;\n\n\t\t\t//the board has not already been solved by the user\n\t\t\tif (this.state.steps.length === 0) {\n\t\t\t\tconst sudokuBoardCopy = [];\n\n\t\t\t\tfor (var i = 0; i < sudokuBoard.length; i++)\n\t\t\t\t\tsudokuBoardCopy[i] = sudokuBoard[i].slice();\n\n\t\t\t\t//generate the steps with the sudokuBoardCopy so we don't alter the board\n\t\t\t\tthis.backtrack(0, 0, sudokuBoardCopy, false);\n\n\t\t\t\t// the board has already been solved by the user so we need to clear it\n\t\t\t} else {\n\t\t\t\tthis.clear(this.state.sudokuBoard, this.state.immutableNumbers);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.state.steps.length; i++) {\n\t\t\t\tif (!this.state.currentlyRunning) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst step = this.state.steps[i];\n\n\t\t\t\tsudokuBoard[step.row][step.col] = step.value;\n\t\t\t\tthis.setState({ sudokuBoard });\n\t\t\t\tawait this.delay(100);\n\t\t\t}\n\t\t});\n\t};\n\n\tclear = (sudokuBoard, immutableNumbers) => {\n\t\t//loop through all the squares and clear others\n\t\tfor (let row = 0; row < 9; row++) {\n\t\t\tfor (let col = 0; col < 9; col++) {\n\t\t\t\tif (!immutableNumbers[row][col]) sudokuBoard[row][col] = \"\";\n\t\t\t}\n\t\t}\n\t\tthis.setState({ sudokuBoard });\n\t};\n\n\tshuffleArray = (array) => {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t};\n\n\t//returns false if not done, returns true if done\n\tbacktrack = (row, col, board, random) => {\n\t\tlet end = false;\n\n\t\tif (row === 9) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// if the current column and row are immutable\n\t\tif (this.state.immutableNumbers[row][col]) {\n\t\t\tconst colRow = this.incrementColRow(row, col);\n\t\t\tend = this.backtrack(colRow[0], colRow[1], board, random);\n\n\t\t\t// if the current column and row are changeable\n\t\t} else {\n\t\t\tlet choiceArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\t\tif (random) {\n\t\t\t\tchoiceArray = this.shuffleArray(choiceArray);\n\t\t\t}\n\n\t\t\tfor (let choice = 1; choice <= 9; choice++) {\n\t\t\t\t// if the current column and row can be changed\n\t\t\t\tconst value = choiceArray.shift().toString();\n\t\t\t\t//const value = choice.toString();\n\t\t\t\tboard[row][col] = value;\n\n\t\t\t\tconst validBoard = this.isValidSudoku(board, row, col, value);\n\n\t\t\t\tthis.state.steps.push({\n\t\t\t\t\tcol: col,\n\t\t\t\t\trow: row,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvalid: validBoard.outcome,\n\t\t\t\t\treason: validBoard.reason,\n\t\t\t\t});\n\n\t\t\t\tif (validBoard.outcome) {\n\t\t\t\t\tconst colRow = this.incrementColRow(row, col);\n\t\t\t\t\tend = this.backtrack(colRow[0], colRow[1], board, random);\n\t\t\t\t\tif (end) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboard[row][col] = \"\";\n\t\t\tthis.state.steps.push({\n\t\t\t\tcol: col,\n\t\t\t\trow: row,\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalid: null,\n\t\t\t\treason: null,\n\t\t\t});\n\t\t}\n\t\treturn end;\n\t};\n\n\tincrementColRow = (row, col) => {\n\t\tcol++;\n\n\t\tif (col === 9) {\n\t\t\tcol = 0;\n\t\t\trow++;\n\t\t}\n\n\t\treturn [row, col];\n\t};\n\n\tisValidSudoku = (board, row, col, value) => {\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tif (board[row][i] === value && i !== col) {\n\t\t\t\treturn { outcome: false, reason: 0 };\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tif (board[i][col] === value && i !== row) {\n\t\t\t\treturn { outcome: false, reason: 1 };\n\t\t\t}\n\t\t}\n\n\t\tconst square = Math.floor(row / 3) + Math.floor(col / 3) * 3;\n\t\tconst colStart = Math.floor(square / 3) * 3;\n\t\tconst rowStart = (square % 3) * 3;\n\n\t\tfor (let r = rowStart; r < rowStart + 3; r++) {\n\t\t\tfor (let c = colStart; c < colStart + 3; c++) {\n\t\t\t\tif (board[r][c] === value && row !== r && col !== c) {\n\t\t\t\t\treturn { outcome: false, reason: 2 };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { outcome: true, reason: null };\n\t};\n\n\tchangeBoard = async (row, col, value) => {\n\t\tlet sudokuBoard = [...this.state.sudokuBoard];\n\t\tsudokuBoard[row][col] = value;\n\t\tthis.setState({ sudokuBoard });\n\t};\n\n\trender() {\n\t\t// build the sudoku board from above\n\t\tconst rows = [];\n\t\tfor (const [indexRow, row] of this.state.sudokuBoard.entries()) {\n\t\t\tlet ent = [];\n\t\t\tfor (const [indexCol, value] of row.entries()) {\n\t\t\t\tif (this.state.immutableNumbers[indexRow][indexCol]) {\n\t\t\t\t\tent.push(\n\t\t\t\t\t\t<td className=\"font-weight-bold\" key={indexCol + \"-\" + indexRow}>\n\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tent.push(<td key={indexCol + \"-\" + indexRow}>{value}</td>);\n\t\t\t\t}\n\t\t\t}\n\t\t\trows.push(\n\t\t\t\t<tr key={indexRow} className=\"game-row\">\n\t\t\t\t\t{ent}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<Styled>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"text-center table-container\">\n\t\t\t\t\t\t\t\t<table className=\"mx-auto mt-4 game-board\">\n\t\t\t\t\t\t\t\t\t<tbody>{rows}</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t<ButtonGroup size=\"md\" className=\"controls mt-1\">\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\n\t\t\t\t\t\t\t\t\t\t\tthis.generate();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\n\t\t\t\t\t\t\t\t\t\t\t//end the viz if it is going\n\t\t\t\t\t\t\t\t\t\t\tthis.clear(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.sudokuBoard,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.immutableNumbers\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.viz();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tVisualize\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ currentlyRunning: false });\n\n\t\t\t\t\t\t\t\t\t\t\tthis.solveSudoku(this.state.sudokuBoard);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSolve\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Styled>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nimport styled from \"styled-components\";\n\nconst Styled = styled.div``;\n\nclass NavigationBar extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<Styled>\n\t\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t<Navbar.Brand href=\"/\">Sudoku Solver</Navbar.Brand>\n\t\t\t\t</Navbar>\n\t\t\t</Styled>\n\t\t);\n\t}\n}\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\n\nimport Board from \"./Components/Board\";\nimport NavigationBar from \"./Components/NavigationBar\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<NavigationBar />\n\t\t\t<Board />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}